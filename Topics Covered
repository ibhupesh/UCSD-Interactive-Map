Contents Covered in the project:


Module 1:

Select and effectively use Java documentation
Generate visual maps using Java code and the Unfolding Maps libraries
Create and draw memory models for reasoning about variable values for primitive and object data types
Apply the basic rules for variable scope and explain how it impacts your code
Practice tracing code using memory models and Java's rules for variable scope



Module 2:

Create and manipulate Graphical User Interfaces (GUIs)
Use Java documentation in an effective manner
Use the Processing library in your programs
Modify and customize visual maps using Java code
Use Java to read and parse data files
Categorize data into appropriate objects
Describe and use the List data type and the ArrayList class
Describe and use the Map data type



Module 3:

Explain the value of inheritance as a feature in object oriented programming languages
Use the keyword extends
Explain the relationship between a superclass and a subclass
Use UML Diagrams to display class hierarchies
Explain an “is-a” relationship between classes
Describe how Java object construction occurs from the inside out
Use same-class and superclass constructors in class creation
Create methods which override from a superclass
Compare and contrast method overloading and method overriding
Explain the purpose of polymorphism
Inspect and step through decisions made at compile time and runtime
Use casting of objects to aid the compiler
Use the keyword "abstract"



Module 4:

Distinguish between Abstract Classes and Interfaces
Analyze event-driven code
Explain how mouse-clicks and keyboard input interact with the program execution
Design user-interface elements
Write code to implement a button and respond to mouse events
Describe inheritance relationships used in the course so far
Distinguish between interfaces and classes in this hierarchy



Module 5:

Recognize the importance of search
Write code to perform a linear search
Explain and implement the binary search algorithm
Explain why binary search is better than linear search
Define sorting
Explain why sorting data can be useful
Explain and implement the selection sort algorithm
Interpret the code and describe its high-level function
Describe alternate algorithms for sorting
Use pre-defined Java methods to sort
Explain the properties of this built-in sort algorithm
Define and use the Comparable interface in Java
